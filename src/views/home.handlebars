<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Lista de Productos</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
    }
    ul {
      list-style-type: none;
      padding: 0;
    }
    li {
      margin: 10px 0;
      padding: 10px;
      border: 1px solid #ddd;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    input, select, button {
      padding: 10px;
      margin: 5px;
    }
    .pagination {
      margin-top: 20px;
    }
    .pagination a {
      margin: 5px;
      padding: 10px;
      text-decoration: none;
      border: 1px solid #ddd;
    }
    .pagination a.active {
      background-color: blue;
      color: white;
    }
  </style>
</head>
<body>

  <h1>Lista de Productos</h1>   
  {{#if (eq user.role 'admin')}}
 <h2><a href="/realtimeproducts">Administrar productos</a></h2>
{{/if}}

  {{#if (eq user.role 'user')}}
<h2><a id="ver-carrito-link" href="#">Ver Carrito</a></h2>
{{/if}}

  <label for="filtro-category">Filtrar por categoría:</label>
  <select id="filtro-category" onchange="actualizarFiltros()">
    <option value="todas" {{#if (eq categoryActual "todas")}}selected{{/if}}>Todas</option>
    {{#each categorys}}
      <option value="{{this}}" {{#if (eq this ../categoryActual)}}selected{{/if}}>{{this}}</option>
    {{/each}}
  </select>

  <label for="filtro-disponibilidad">Disponibilidad:</label>
  <select id="filtro-disponibilidad" onchange="actualizarFiltros()">
    <option value="todas" {{#if (eq disponibilidad "todas")}}selected{{/if}}>Todas</option>
    <option value="true" {{#if (eq disponibilidad "true")}}selected{{/if}}>Disponibles</option>
    <option value="false" {{#if (eq disponibilidad "false")}}selected{{/if}}>No disponibles</option>
  </select>

  <label for="filtro-orden">Ordenar por price:</label>
  <select id="filtro-orden" onchange="actualizarFiltros()">
    <option value="none" {{#if (eq sort "none")}}selected{{/if}}>Sin orden</option>
    <option value="asc" {{#if (eq sort "asc")}}selected{{/if}}>Menor a mayor</option>
    <option value="desc" {{#if (eq sort "desc")}}selected{{/if}}>Mayor a menor</option>
  </select>
  <button id="btnLogout">Cerrar sesión</button>
  <ul id="productos-list">
    {{#each productos}}
      <li>
        <a href="/products/{{_id}}">
          <strong>{{title}}</strong>
        </a>
        - ${{price}} - {{category}} - 
        {{#if (gt stock 0)}}
          <span style="color: green;">Disponible</span>
        {{else}}
          <span style="color: red;">No disponible</span>
        {{/if}}

        {{#if (gt stock 0)}}
          <button onclick="agregarAlCarrito('{{_id}}')">Agregar al carrito</button>
        {{/if}}
      </li>
    {{/each}}
  </ul>

  <div class="pagination">
    {{#if hasPrevPage}}
      <a href="{{prevLink}}">Anterior</a>
    {{/if}}
    <span>Página {{page}} de {{totalPages}}</span>
    {{#if hasNextPage}}
      <a href="{{nextLink}}">Siguiente</a>
    {{/if}}
  </div>

  <script>
  function actualizarFiltros() {
    const categorySeleccionada = document.getElementById("filtro-category").value;
    const disponibilidadSeleccionada = document.getElementById("filtro-disponibilidad").value;
    const ordenSeleccionado = document.getElementById("filtro-orden").value;

    const url = new URL(window.location.href);

    if (categorySeleccionada === "todas") {
      url.searchParams.delete("category");
    } else {
      url.searchParams.set("category", categorySeleccionada);
    }

    if (disponibilidadSeleccionada === "todas") {
      url.searchParams.delete("disponible");
    } else {
      url.searchParams.set("disponible", disponibilidadSeleccionada);
    }

    if (ordenSeleccionado === "none") {
      url.searchParams.delete("sort");
    } else {
      url.searchParams.set("sort", ordenSeleccionado);
    }

    window.location.href = url.toString();
  }

  async function obtenerCarrito() {
    let cartId = localStorage.getItem("cartId");

    if (!cartId) {
      try {
        const response = await fetch("/api/carts", {
          method: "POST",
          credentials: "include",
        });
        if (!response.ok) throw new Error("No se pudo crear un carrito.");

        const data = await response.json();
        if (data.status === "success") {
          cartId = data.cartId;
          localStorage.setItem("cartId", cartId);
        } else {
          throw new Error("Error al obtener carrito: " + data.message);
        }
      } catch (error) {
        console.error(error);
        alert("Error al obtener carrito.");
        return null;
      }
    }

    return cartId;
  }

  async function agregarAlCarrito(productId) {
    const cartId = await obtenerCarrito();
    if (!cartId) {
      alert("No se pudo obtener un carrito válido.");
      return;
    }

    try {
      const response = await fetch(`/api/carts/products/${productId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ quantity: 1 }),
        credentials: "include",
      });

      if (!response.ok) throw new Error("Error al agregar el producto.");

      const data = await response.json();
      if (data.status === "success") {
        alert("Producto agregado al carrito");
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error(error);
      alert("Error al agregar producto al carrito.");
    }
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const linkCarrito = document.getElementById("ver-carrito-link");
    if (!linkCarrito) return;

    let cartId = localStorage.getItem("cartId");
    if (!cartId) {
      cartId = await obtenerCarrito();
    }

    if (cartId) {
      linkCarrito.href = `/cart?cartId=${cartId}`;
    } else {
      linkCarrito.addEventListener("click", (e) => {
        e.preventDefault();
        alert("No se pudo obtener un carrito válido.");
      });
    }
  });
document.getElementById('btnLogout').addEventListener('click', async () => {
  try {
    const response = await fetch('/api/sessions/logout', {
      method: 'GET',
      credentials: 'same-origin'
    });
    if (response.ok) {
      window.location.href = '/login';
    } else {
      console.error('Logout falló:', await response.text());
    }
  } catch (err) {
    console.error('Error en logout:', err);
  }
});
</script>
</body>
</html>
